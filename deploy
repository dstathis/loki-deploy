#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import threading


cloud_config = """
#cloud-config
users:
  - name: ubuntu
    ssh-authorized-keys:
      - {}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash
runcmd:
  - echo "AllowUsers ubuntu" >> /etc/ssh/sshd_config
  - restart ssh
"""

promtail_config = """
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  # Distributor
  - url: http://{}:3100/loki/api/v1/push

scrape_configs:
- job_name: system
  static_configs:
  - targets:
      - localhost
    labels:
      job: varlogs
      __path__: /var/log/syslog
"""

ips = {}


def getip(name):
    return run(f'multipass info {name} --format csv').stdout.splitlines()[1].split(',')[2]


def run(cmd, capture_output=True, echo=True):
    try:
        if echo:
            print(cmd)
        p = subprocess.run(cmd, shell=True, capture_output=capture_output, encoding='utf-8', check=True)
        return p
    except subprocess.CalledProcessError as e:
        print(f'stdout:\n{e.stdout}')
        print(f'stderr:\n{e.stderr}')
        raise


def ssh_run(cmd, name, capture_output=True):
    print(f'ssh {name}: {cmd}')
    p = subprocess.run(f'ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" '
                       'ubuntu@{ips[name]} "{cmd}"',
                       shell=True, capture_output=capture_output, encoding='utf-8')
    return p


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--microk8s-nodes', action='store', dest='num',
                        help='Number of microk8s nodes', default=3, type=int)
    parser.add_argument('--vm-mem', action='store', default='4G', help='memory per vm')
    parser.add_argument('--vm-cpus', action='store', default=1, help='cpus per vm')
    parser.add_argument('--vm-disk', action='store', default='20G', help='disk size per vm')
    parser.add_argument('--ingesters', action='store', type=int, default=3, help='number of ingesters')
    parser.add_argument('--queriers', action='store', type=int, default=3, help='number of queriers')
    parser.add_argument('--distributors', action='store', type=int, default=3, help='number of distributors')
    parser.add_argument('--delete', action='store_true', help='delete cluster')
    parser.add_argument('-y', '--yes', action='store_true', help='always answer yes')
    parser.add_argument('--public-key', action='store', default='~/.ssh/id_rsa.pub',
                        help='public key to copy to the vms')
    parser.add_argument('--download-promtail', action='store_true', help='download and extract promtail then exit')
    return parser.parse_args()


def install_ubuntu(i, args):
    run(f'multipass launch --name mk8s-vm{i} --cpus {args.vm_cpus} --mem {args.vm_mem} --disk {args.vm_disk} '
        '--cloud-init cloud-config.yaml')
    ips[f'mk8s-vm{i}'] = getip(f'mk8s-vm{i}')


def install_k8s(vm):
    ssh_run('sudo snap install microk8s --classic; '
            'sudo usermod -a -G microk8s ubuntu; '
            'sudo chown -f -R ubuntu ~/.kube', vm, capture_output=False)


def main():
    args = parse_args()

    # Make sure multipass is installed
    if run('which multipass', echo=False).returncode != 0:
        sys.stderr.write('Please install multipass (snap install multipass)')
        sys.exit(2)

    if args.download_promtail:
        # Make sure unzip is installed
        if run('which unzip', echo=False).returncode != 0:
            sys.stderr.write('Please install unzip (apt install unzip)')
            sys.exit(2)

        promtail_url = run('curl -s https://api.github.com/repos/grafana/loki/releases/latest | '
                           'grep "browser_download_url.*promtail-linux-amd64.zip" | '
                           'cut -d ":" -f 2,3 | tr -d "\\"" | tr -d " "').stdout
        run(f'curl -L -o promtail-linux-amd64.zip {promtail_url}')
        run('unzip promtail-linux-amd64.zip')
        run('rm promtail-linux-amd64.zip')
        return

    if args.delete:
        if not args.yes:
            answer = input('This will delete all vms with the name "mk8s-vm*" and purge multipass.\n'
                           'Do you want to continue? [y/N] ')
            if answer not in ['yes', 'Yes', 'Y', 'y']:
                sys.stdout.writ('Abort.\n')
                return
        machines = [line.split(',')[0] for line in run('multipass list --format csv',
                                                       echo=False).stdout.splitlines()[1:]]
        for machine in machines:
            if machine.startswith('mk8s-vm'):
                run(f'multipass delete {machine}')
        run('multipass purge')
        return

    # Make sure helm is installed
    if run('which multipass', echo=False).returncode != 0:
        sys.stderr.write("Please install helm (snap install helm --classic)")
        sys.exit(2)

    # Make sure kubectl is installed
    if run('which kubectl', echo=False).returncode != 0:
        sys.stderr.write("Please install kubectl (snap install kubectl --classic)")
        sys.exit(2)

    # Deploy Ubuntu machines
    with open(os.path.expanduser(args.public_key)) as f:
        pub_key = f.read()
    with open("cloud-config.yaml", 'w') as f:
        f.write(cloud_config.format(pub_key))
    threads = []
    for i in range(args.num):
        thread = threading.Thread(target=install_ubuntu, args=(i, args))
        thread.start()
        threads.append(thread)
    for thread in threads:
        thread.join()

    # Install microk8s
    threads = []
    for vm in ips:
        thread = threading.Thread(target=install_k8s, args=(vm,))
        thread.start()
        threads.append(thread)
    for thread in threads:
        thread.join()

    # Set up microk8s cluster
    for i in range(1, args.num):
        cmd = ssh_run("microk8s add-node", 'mk8s-vm0').stdout
        cmd = cmd.splitlines()[1]
        ssh_run(f'{cmd}', f'mk8s-vm{i}')
    ssh_run('microk8s enable dns storage', 'mk8s-vm0')
    run('helm repo add grafana https://grafana.github.io/helm-charts')
    run('helm repo update')
    config = ssh_run('microk8s config', 'mk8s-vm0').stdout
    with open('kubeconfig.yaml', 'w') as f:
        f.write(config)
    run('helm install --kubeconfig kubeconfig.yaml loki grafana/loki-distributed --namespace loki --create-namespace '
        f'--set ingester.replicas={args.ingesters} --set querier.replicas={args.queriers} '
        f'--set distributor.replicas={args.distributors}')
    run('helm install --kubeconfig kubeconfig.yaml grafana grafana/grafana --namespace loki')
    run('kubectl --kubeconfig kubeconfig.yaml get secret --namespace loki grafana -o jsonpath="{.data.admin-password}"'
        ' | base64 --decode ; echo', capture_output=False)
    distributor_ip = run('kubectl --kubeconfig kubeconfig.yaml --namespace loki get services '
                         '| grep loki-loki-distributed-distributor').stdout.split()[2]
    with open('promtail-config.yaml', 'w') as f:
        f.write(promtail_config.format(distributor_ip))


if __name__ == '__main__':
    main()
