#!/usr/bin/env python3

import argparse
import subprocess
import sys
import threading


cloud_config = """
#cloud-config
users:
  - name: ubuntu
    ssh-authorized-keys:
      - {}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash
runcmd:
  - echo "AllowUsers ubuntu" >> /etc/ssh/sshd_config
  - restart ssh
"""

ips = {}


def getip(name):
    return run(f'multipass info {name} --format csv').stdout.splitlines()[1].split(',')[2]


def run(cmd, capture_output=True, echo=True):
    if echo:
        print(cmd)
    p = subprocess.run(cmd, shell=True, capture_output=capture_output, encoding='utf-8')
    return p


def ssh_run(cmd, name):
    print(f'ssh {name}: {cmd}')
    return subprocess.run(f'ssh -o "StrictHostKeyChecking no" ubuntu@{ips[name]} "{cmd}"',
                          shell=True, capture_output=True, encoding='utf-8')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--microk8s-nodes', action='store', dest='num',
                        help='Number of microk8s nodes', default=3, type=int)
    parser.add_argument('--vm-mem', action='store', default='4G', help='memory per vm')
    parser.add_argument('--vm-cpus', action='store', default=2, help='cpus per vm')
    parser.add_argument('--delete', action='store_true', help='delete cluster')
    return parser.parse_args()


def install_ubuntu(i, args):
    run(f"multipass launch --name mk8s-vm{i} --cpus {args.vm_cpus} --mem {args.vm_mem} --cloud-init cloud-config.yaml")
    ips[f'mk8s-vm{i}'] = getip(f'mk8s-vm{i}')


def install_k8s(vm):
    ssh_run('sudo snap install microk8s --classic; '
            'sudo usermod -a -G microk8s ubuntu; '
            'sudo chown -f -R ubuntu ~/.kube', vm)


def main():
    args = parse_args()

    # Make sure multipass is installed
    if run('which multipass', echo=False).returncode != 0:
        sys.stderr.write("Please install multipass (snap install multipass)")
        sys.exit(2)

    if args.delete:
        answer = input('This will delete all vms with the name "mk8s-vm*" and purge multipass: continue? y/N\n')
        if answer not in ['yes', 'Yes', 'Y', 'y']:
            return
        machines = [line.split(',')[0] for line in run('multipass list --format csv', echo=False).stdout.splitlines()[1:]]
        for machine in machines:
            if machine.startswith('mk8s-vm'):
                run(f'multipass delete {machine}')
        run('multipass purge')
        return

    # Make sure helm is installed
    if run('which multipass', echo=False).returncode != 0:
        sys.stderr.write("Please install helm (snap install helm --classic)")
        sys.exit(2)

    # Deploy Ubuntu machines
    pub_key = run("cat ~/.ssh/id_rsa.pub").stdout
    with open("cloud-config.yaml", 'w') as f:
        f.write(cloud_config.format(pub_key))
    threads = []
    for i in range(args.num):
        thread = threading.Thread(target=install_ubuntu, args=(i,args))
        thread.start()
        threads.append(thread)
    for thread in threads:
        thread.join()

    # Install microk8s
    threads = []
    for vm in ips:
        thread = threading.Thread(target=install_k8s, args=(vm,))
        thread.start()
        threads.append(thread)
    for thread in threads:
        thread.join()

    # Set up microk8s cluster
    for i in range(1, args.num):
        cmd = ssh_run("microk8s add-node", 'mk8s-vm0').stdout
        cmd = cmd.splitlines()[1]
        ssh_run(f'{cmd}', f'mk8s-vm{i}')
    ssh_run('microk8s enable dns', 'mk8s-vm0')
    run('helm repo add grafana https://grafana.github.io/helm-charts')
    run('heml repo update')
    config = ssh_run('microk8s config', 'mk8s-vm0').stdout
    with open('kubeconfig.yaml', 'w') as f:
        f.write(config)
    run('helm install --kubeconfig kubeconfig.yaml loki grafana/loki-distributed --namespace loki --create-namespace '
        '--set ingester.replicas=3 --set querier.replicas=3 --set distributor.replicas=3')
    run('helm install --kubeconfig kubeconfig.yaml grafana grafana/grafana --namespace loki')
    run('kubectl --kubeconfig kubeconfig.yaml get secret --namespace loki grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo', capture_output=False)


if __name__ == '__main__':
    main()
